#include<stdio.h>
#include<alloc.h>
#include<stdlib.h>
#define SIZE 5
struct node
{
int info;
struct node *llink;
struct node *rlink;
};
typedef struct node *NODE;

NODE getnode()
{
NODE x;
x=(NODE)malloc(sizeof(struct node));
if(x==NULL)
{
printf("OUT OF MEMORY\n");
exit(0);
}
return x;
}

NODE insfront(int item,NODE first)
{
NODE temp=getnode();
temp->info=item;
temp->llink=temp->rlink=NULL;
if(first==NULL) return temp;
temp->rlink=first;
first->llink=temp;
return temp;
}
NODE insrear(int item,NODE first)
{
NODE prev;
NODE temp=getnode();
temp->info=item;
temp->llink=temp->rlink=NULL;
if(first==NULL) return temp;
prev=first;
while(prev->rlink!=NULL)
{
prev=prev->rlink;
}
 prev->rlink=temp;
 temp->llink=prev;

 return first;
 }

 NODE insnthpos(int item,NODE first,int pos)
 {
 NODE temp=getnode();
 NODE curr;
 temp->info=item;
 temp->llink=temp->rlink=NULL;
 if(first==NULL) return temp;
 else
 {
 int i;
 curr=first;
 for(i=0;i<(pos-2);i++)
 {
 curr=curr->rlink;

 }

 temp->rlink=curr->rlink;
 temp->llink=curr;
 curr->rlink=temp;

 return first;}
 }


NODE delrear(NODE first)
{
NODE prev,curr;
if(first==NULL)
{
printf("LIST EMPTY\n");
return NULL;
}
if(first->rlink==NULL)
{
printf("%d",first->info);
free(first);
return NULL;
}
prev=NULL;
curr=first;
while(curr->rlink!=NULL)
{
prev=curr;
curr=curr->rlink;
}
printf("ITEM DELETED IS %d",curr->info);
free(curr);
prev->rlink=NULL;
return first;
}

void display(NODE first)
{
NODE curr;
if(first==NULL)
{
printf("LIST EMPTY\n");
}
curr=first;
while(curr!=NULL)
{
printf("%d",curr->info);
curr=curr->rlink;
}
}

void main()
{
NODE first;
int ch,item,pos;
first=NULL;
do
{
printf("1.INSNTHPOS 2.DELETE 3.DISPLAY 4.EXIT\n");
scanf("%d",&ch);
switch(ch)
{
case 1: printf("ENTER ITEM\n");
scanf("%d",&item);
printf("ENTER pos\n");
scanf("%d",&pos);
if(pos==1)
first=insfront(item,first);
else
if(pos==SIZE-1)
first=insrear(item,first);
else
first=insnthpos(item,first,pos);
break;

case 2: first=delrear(first);
break;

case 3: display(first);
break;

case 4:exit(0);
}
}while(ch<=4);
}

